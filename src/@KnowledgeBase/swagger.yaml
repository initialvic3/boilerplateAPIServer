swagger: '2.0'
info:
  description: |
    This is the DCM Telemetry server.  You can find 
    out more about Swagger at 
    [http://swagger.io](http://swagger.io) or on 
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: 1.0.0
  title: DCM API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: virtserver.swaggerhub.com
basePath: /api/1.0.0
tags:
  - name: telemetry
    description: Everything about DCM Telemetry
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: locations
    description: Operations about locations
  - name: devices
    description: Operations about devices
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about DCM telemetery
      url: 'http://swagger.io'
schemes:
  - https
  - http
paths:
  /telemetry:
    get:
      tags:
        - telemetry
      summary: Finds Telemetrys by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findTelemetrysByStatus
      produces:
        - application/json
      parameters:
        - name: type
          in: query
          description: Status values that need to be considered for filter
          required: false
          type: array
          items:
            type: string
            enum:
              - mood
              - density
              - flow
          collectionFormat: multi
        - name: startDate
          in: query
          description: Start date that need to be considered for filter
          required: false
          type: string
          format: date-time
        - name: endDate
          in: query
          description: End date that need to be considered for filter
          required: false
          type: string
          format: date-time
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Telemetry'
        '400':
          description: Invalid status value
      security:
        - Bearer: []
    post:
      tags:
        - telemetry
      summary: Add a new telemetry to the database
      operationId: addTelemetry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Telemetry object that needs to be added to the database
          required: true
          schema:
            $ref: '#/definitions/Telemetry'
      responses:
        '201':
          description: Successful operation
          schema:
            $ref: '#/definitions/Telemetry'
        '405':
          description: Invalid input
      security:
        - Bearer: []
  '/telemetry/{telemetryId}':
    get:
      tags:
        - telemetry
      summary: Find telemetry by ID
      description: Returns a single telemetry
      operationId: getTelemetryById
      produces:
        - application/json
      parameters:
        - name: telemetryId
          in: path
          description: ID of telemetry to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Telemetry'
        '400':
          description: Invalid ID supplied
        '404':
          description: Telemetry not found
      security:
        - Bearer: []
    put:
      tags:
        - telemetry
      summary: Update an existing telemetry
      operationId: updateTelemetry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: telemetryId
          in: path
          description: ID of telemetry to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Telemetry object that needs to be added to the database
          required: true
          schema:
            $ref: '#/definitions/Telemetry'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Telemetry not found
        '405':
          description: Validation exception
      security:
        - Bearer: []
    delete:
      tags:
        - telemetry
      summary: Deletes a telemetry
      operationId: deleteTelemetry
      produces:
        - application/json
      parameters:
        - name: telemetryId
          in: path
          description: Telemetry rowid to delete
          required: true
          type: string
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Telemetry not found
      security:
        - Bearer: []
  /telemetry/uploadImage:
    post:
      tags:
        - telemetry
      summary: uploads an image
      operationId: uploadFile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        '201':
          description: successful operation
      security:
        - Bearer: []
  /locations:
    get:
      tags:
        - locations
      summary: Finds Locations
      description: Get all decives
      operationId: findLocations
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Location'
        '400':
          description: Invalid status value
      security:
        - Bearer: []
    post:
      tags:
        - locations
      summary: Add a new location to the system
      operationId: addLocation
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Location object that needs to be added to the system
          required: true
          schema:
            $ref: '#/definitions/Location'
      responses:
        '201':
          description: Successful operation
          schema:
            $ref: '#/definitions/Location'
        '405':
          description: Invalid input
      security:
        - Bearer: []
  '/locations/{locationId}':
    get:
      tags:
        - locations
      summary: Find location by ID
      description: Returns a single location
      operationId: getLocationById
      produces:
        - application/json
      parameters:
        - name: locationId
          in: path
          description: ID of location to return
          required: true
          type: string
          format: uuis
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Location'
        '400':
          description: Invalid ID supplied
        '404':
          description: Location not found
      security:
        - Bearer: []
    put:
      tags:
        - locations
      summary: Update an existing location
      operationId: updateLocation
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: locationId
          in: path
          description: ID of location to return
          required: true
          type: string
          format: uuid
        - in: body
          name: body
          description: Location object that needs to be added to the system
          required: true
          schema:
            $ref: '#/definitions/Location'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Location not found
        '405':
          description: Validation exception
      security:
        - Bearer: []
    delete:
      tags:
        - locations
      summary: Deletes a location
      operationId: deleteLocation
      produces:
        - application/json
      parameters:
        - name: locationId
          in: path
          description: Location id to delete
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Location not found
      security:
        - Bearer: []
  /devices:
    get:
      tags:
        - devices
      summary: Finds Devices
      description: Get all decives
      operationId: findDevices
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Device'
        '400':
          description: Invalid status value
      security:
        - Bearer: []
    post:
      tags:
        - devices
      summary: Add a new device to the system
      operationId: addDevice
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Device object that needs to be added to the system
          required: true
          schema:
            $ref: '#/definitions/Device'
      responses:
        '201':
          description: Successful operation
          schema:
            $ref: '#/definitions/Device'
        '405':
          description: Invalid input
      security:
        - Bearer: []
  '/devices/{deviceId}':
    get:
      tags:
        - devices
      summary: Find device by ID
      description: Returns a single device
      operationId: getDeviceById
      produces:
        - application/json
      parameters:
        - name: deviceId
          in: path
          description: ID of device to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Device'
        '400':
          description: Invalid ID supplied
        '404':
          description: Device not found
      security:
        - Bearer: []
    put:
      tags:
        - devices
      summary: Update an existing device
      operationId: updateDevice
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: deviceId
          in: path
          description: ID of device to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Device object that needs to be added to the system
          required: true
          schema:
            $ref: '#/definitions/Device'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Device not found
        '405':
          description: Validation exception
      security:
        - Bearer: []
    delete:
      tags:
        - devices
      summary: Deletes a device
      operationId: deleteDevice
      produces:
        - application/json
      parameters:
        - name: deviceId
          in: path
          description: Device id to delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Device not found
      security:
        - Bearer: []
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
          schema:
            type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  dcm_oauth:
    type: oauth2
    authorizationUrl: 'http://telemetry.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:telemetry': modify telemetry in your account
      'read:telemetry': read your telemetry
      'write:devices': modify telemetry in your account
      'read:devices': read your telemetry
      'write:locations': modify telemetry in your account
      'read:locations': read your telemetry
  Bearer:
    type: apiKey
    name: api_key
    in: header
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Device:
    xml:
      name: Device
    allOf:
      - $ref: '#/definitions/TenantBase'
      - type: object
        properties:
          id:
            type: integer
            format: int64
            example: 11004560
          tenantId:
            type: string
            format: uuid
            example: 3b3d4b46-6462-4c7d-a77b-a13d6ff66942
            readOnly: true
          model:
            type: string
          serial:
            type: string
          name:
            type: string
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
    example:
      firstName: firstName
      lastName: lastName
      password: password
      userStatus: 6
      phone: phone
      id: 0
      email: email
      username: username
  TenantBase:
    type: object
    properties:
      tenantId:
        type: string
        format: uuid
        example: 3b3d4b46-6462-4c7d-a77b-a13d6ff66942
        readOnly: true
    xml:
      name: TenantBase
  Location:
    xml:
      name: Location
    allOf:
      - $ref: '#/definitions/TenantBase'
      - type: object
        properties:
          id:
            type: string
            format: uuid
            example: fd11da70-3103-478c-8e17-544a9c687772
          code:
            type: string
            example: EG
          name:
            type: string
            example: East gate
  Telemetry:
    xml:
      name: Telemetry
    allOf:
      - $ref: '#/definitions/TenantBase'
      - type: object
        required:
          - deviceId
        properties:
          rowid:
            type: string
            example: 11004560-20141216210500
            readOnly: true
          deviceId:
            type: integer
            format: int64
            example: 11004560
          device:
            type: object
            allOf:
              - $ref: '#/definitions/Device'
          locationId:
            type: string
            format: uuid
            example: fd11da70-3103-478c-8e17-544a9c687772
          location:
            type: object
            allOf:
              - $ref: '#/definitions/Location'
          timestamp:
            type: string
            format: date-time
            example: '2018-12-16T21:05:00.000'
          type:
            type: string
            description: telemetry value type
            enum:
              - density
              - flow
              - mood
          value:
            type: integer
            format: int64
            example: 32
          imageLink:
            type: string
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
